/* CSci4061 S2016 Assignment 3
 * section: 7
 * section: 2
 * section: 2
 * date: 04/12/2016
 * name: Sujita Shah, Chaoran chen
 * id: shahx220, chen4393 */

1. Our program is about a TCP simulation aplication by message-passing based on Linux platform.

2. Compilation: 
move to the directory of ./proj3_group_AR folder 
type "make" in the terminal 

3. Using from the shell
type ./application to start test the following requirements.

4. Instruction:
Open more than 2 terminal windows. Type ./application <name_of_the_process> <key> <window_size> <max_delay> <timeout> <drop_rate> in each window.

5. Assumption:
The message should be less than 1024 bytes.

6. Error handling:
Check the number of command line arguments.
Check the return value of the system calls in our program, if they are -1, print error message and exit.
Check the invalid receiver name.
Check the length of receiver name.

!!!NOTICE:
7. Question answering:
a. What is the effect of having a very short TIMEOUT period and a very long TIMEOUT period?

Having a shorter period will cause the sender to resend more frequently, so there will be lots of packets being sending. The receiver's side will busily handling these packets and sender will easily reach max timeout and print "Failed to send the message".

Having a longer TIMEOUT period will cause low efficiency. The sender will resend the packet after a very long period from sending the original packet. In this way, the receiver will need much more time to handle the packet. Considering the delay in ACK handling and dropping packets, the transmission time of message will become very long. Just imagine that we set the TIMEOUT as an infinite value, if the sender didn’t receive an ACK, he need to resend the packet by triggering TIMEOUT. However, the sender will not resend at that time due to the longer TIMEOUT period, so that both sender and receiver will "wait" until the TIMEOUT expires, which will cause delay.

b. What is the effect of having a very small window size (e.g., n=1) and a very large window size?

Having a very small window size will be less concurrent than a very large window size. For example, n=1, every time we can only send one packet, and wait for its ACK_packet. And then we can send another packet. It will cause less concurency.

Having a very large window size will cause unbalance between sender and receiver. Even though the sender can send lots of packets each time, the receiver need to deal with many packets. Just imagine that we set an infinite WINDOW_SIZE, so after sender receiving the first ACK, he will send plenty of packets simultaneously. The receiver’s side is much more slower than sender’s side. Therefore, there will be many packets filled in the mailbox, which may cause sender block.

!!!NOTICE:
8. Typical cases NEED TO KNOW:
a. When TIMEOUT expires many times and causes the MAX_TIMEOUT, the sender process will return directly without sending any packets but the receiver is still waiting for ACKs and he will not return. In this situatiion, the user needs to hit "Ctrl-C" to terminate all the processes.

b. When receiver has finished receiving but the sender is still sending, the receiver should reply with an ACK but ignore the content of the packet.

